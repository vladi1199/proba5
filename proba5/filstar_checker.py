#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# === Selenium –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –±—Ä–æ–π–∫–∏ ===
# - –ù–∞ –≤—Å—è–∫–æ –ø—É—Å–∫–∞–Ω–µ –æ–±—Ö–æ–∂–¥–∞ –≤—Å–∏—á–∫–∏ SKU –æ—Ç CSV (–±–µ–∑ resume).
# - –¢—ä—Ä—Å–∏ –ø—Ä–µ–∑ /search?term=<sku> –∏ —Å—ä–±–∏—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤–∏ –ª–∏–Ω–∫–æ–≤–µ.
# - –û—Ç–≤–∞—Ä—è –ø—Ä–æ–¥—É–∫—Ç–∏—Ç–µ, –Ω–∞–º–∏—Ä–∞ —Ç–æ—á–Ω–∏—è —Ä–µ–¥ –ø–æ "–ö–û–î" –∏:
#     * –¶–µ–Ω–∞: –Ω–æ—Ä–º–∞–ª–Ω–∞—Ç–∞ (–æ—Ç <strike> –∞–∫–æ –∏–º–∞; –∏–Ω–∞—á–µ –ø—ä—Ä–≤–∞—Ç–∞ ‚Äû... –ª–≤.‚Äú –≤ —Ä–µ–¥–∞)
#     * –ù–∞–ª–∏—á–Ω–æ—Å—Ç: –∞–∫–æ —Ä–µ–¥—ä—Ç —Å—ä–¥—ä—Ä–∂–∞ tooltip "–ò–∑—á–µ—Ä–ø–∞–Ω –ø—Ä–æ–¥—É–∫—Ç!" / Email –∏–∫–æ–Ω–∞—Ç–∞ –∑–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Üí "–ò–∑—á–µ—Ä–ø–∞–Ω", –∏–Ω–∞—á–µ "–ù–∞–ª–∏—á–µ–Ω"
# - –ù–µ —á–µ—Ç–µ –∏ –Ω–µ –∑–∞–ø–∏—Å–≤–∞ –±—Ä–æ–π–∫–∏ (–ø–∏—à–µ "-" –∑–∞ –∫–æ–ª–æ–Ω–∞ ‚Äû–ë—Ä–æ–π–∫–∏‚Äú).
# - –°–µ—Ä–∏–π–Ω–æ –∏ —â–∞–¥—è—â–æ (–ª–µ–∫–∏ –ø–∞—É–∑–∏).

import csv
import os
import re
import time
from urllib.parse import urljoin

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# ---------------- –ü–™–¢–ò–©–ê ----------------
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SKU_CSV = os.path.join(BASE_DIR, "sku_list_filstar.csv")
RES_CSV = os.path.join(BASE_DIR, "results_filstar.csv")
NF_CSV  = os.path.join(BASE_DIR, "not_found_filstar.csv")
DEBUG_DIR = os.path.join(BASE_DIR, "debug_html")
os.makedirs(DEBUG_DIR, exist_ok=True)

SEARCH_URL = "https://filstar.com/search?term={q}"

# ---------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------
REQUEST_WAIT = 0.5      # –ø–∞—É–∑–∞ —Å–ª–µ–¥ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
BETWEEN_SKU  = 0.6      # –ø–∞—É–∑–∞ –º–µ–∂–¥—É SKU
PAGE_TIMEOUT = 20       # WebDriverWait timeout
MAX_CANDIDATES = 12     # –º–∞–∫—Å–∏–º—É–º –∫–∞–Ω–¥–∏–¥–∞—Ç-–ª–∏–Ω–∫–æ–≤–µ –æ—Ç —Ç—ä—Ä—Å–µ–Ω–µ

# ---------------- –ü–û–ú–û–©–ù–ò ----------------
def only_digits(s: str) -> str:
    return re.sub(r"\D+", "", s or "")

def save_debug_html(driver, sku: str, tag: str):
    try:
        path = os.path.join(DEBUG_DIR, f"debug_{sku}_{tag}.html")
        with open(path, "w", encoding="utf-8") as f:
            f.write(driver.page_source)
        print(f"   üêû Debug HTML –∑–∞–ø–∏—Å–∞–Ω: {path}")
    except Exception:
        pass

def create_driver() -> webdriver.Chrome:
    opts = Options()
    opts.add_argument("--headless=new")
    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-dev-shm-usage")
    opts.add_argument("--window-size=1280,2200")
    driver = webdriver.Chrome(options=opts)
    driver.set_page_load_timeout(PAGE_TIMEOUT)
    return driver

def init_result_files():
    with open(RES_CSV, "w", newline="", encoding="utf-8") as f:
        csv.writer(f).writerow(["SKU", "–ù–∞–ª–∏—á–Ω–æ—Å—Ç", "–ë—Ä–æ–π–∫–∏", "–¶–µ–Ω–∞ (–ª–≤.)"])
    with open(NF_CSV, "w", newline="", encoding="utf-8") as f:
        csv.writer(f).writerow(["SKU"])

def append_result(row):
    with open(RES_CSV, "a", newline="", encoding="utf-8") as f:
        csv.writer(f).writerow(row)

def append_nf(sku: str):
    with open(NF_CSV, "a", newline="", encoding="utf-8") as f:
        csv.writer(f).writerow([sku])

def read_skus(path: str):
    out = []
    with open(path, newline="", encoding="utf-8") as f:
        r = csv.reader(f)
        _ = next(r, None)  # —Ö–µ–¥—ä—Ä
        for row in r:
            if not row: continue
            v = (row[0] or "").strip()
            if v and v.lower() != "sku":
                out.append(v)
    return out

# ---------------- –¢–™–†–°–ï–ù–ï ----------------
def get_search_candidates(driver, sku: str):
    url = SEARCH_URL.format(q=sku)
    driver.get(url)
    time.sleep(REQUEST_WAIT)

    try:
        WebDriverWait(driver, PAGE_TIMEOUT).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "main"))
        )
    except Exception:
        pass

    links = []

    # a) .product-item-wapper a.product-name
    try:
        for a in driver.find_elements(By.CSS_SELECTOR, ".product-item-wapper a.product-name"):
            href = (a.get_attribute("href") or "").strip()
            if href:
                if href.startswith("/"):
                    href = urljoin("https://filstar.com", href)
                links.append(href)
    except Exception:
        pass

    # b) .product-title a (–∞–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ–Ω —à–∞–±–ª–æ–Ω)
    try:
        for a in driver.find_elements(By.CSS_SELECTOR, ".product-title a"):
            href = (a.get_attribute("href") or "").strip()
            if href:
                if href.startswith("/"):
                    href = urljoin("https://filstar.com", href)
                links.append(href)
    except Exception:
        pass

    # –ø—Ä–µ–º–∞—Ö–Ω–∏ –¥—É–±–ª–∏, –æ–≥—Ä–∞–Ω–∏—á–∏ –±—Ä–æ–π
    seen, uniq = set(), []
    for h in links:
        if h not in seen:
            seen.add(h)
            uniq.append(h)

    return uniq[:MAX_CANDIDATES]

# ---------------- –ü–†–û–î–£–ö–¢–û–í–ê –°–¢–†–ê–ù–ò–¶–ê ----------------
def extract_from_product_page(driver, sku: str):
    """
    –ù–∞–º–∏—Ä–∞ —Ä–µ–¥–∞ –ø–æ '–ö–û–î' (—Ç–æ—á–Ω–æ SKU) –≤ #fast-order-table.
    –í—Ä—ä—â–∞ (status, qty_placeholder, price_lv), –∫–∞—Ç–æ qty_placeholder = "-"
    –ù–∞–ª–∏—á–Ω–æ—Å—Ç:
      - –∞–∫–æ –≤ —Ä–µ–¥–∞ –∏–º–∞ –±–ª–æ–∫ –∑–∞ –∏–∑—á–µ—Ä–ø–∞–Ω –ø—Ä–æ–¥—É–∫—Ç (Email –∏–∫–æ–Ω–∞ + tooltip / data-target="#send-request") ‚Üí "–ò–∑—á–µ—Ä–ø–∞–Ω"
      - –∏–Ω–∞—á–µ ‚Üí "–ù–∞–ª–∏—á–µ–Ω"
    """
    try:
        WebDriverWait(driver, PAGE_TIMEOUT).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "#fast-order-table tbody"))
        )
    except Exception:
        return None, None, None

    tbody = driver.find_element(By.CSS_SELECTOR, "#fast-order-table tbody")
    rows  = tbody.find_elements(By.CSS_SELECTOR, "tr")
    target = None

    # 1) –Ω–∞–º–µ—Ä–∏ —Ä–µ–¥ –ø–æ td.td-sky == SKU
    for row in rows:
        try:
            code_td = row.find_element(By.CSS_SELECTOR, "td.td-sky")
            code_text = code_td.text.strip()
            if only_digits(code_text) == str(sku):
                target = row
                break
        except Exception:
            continue

    # 2) fallback: —Ç—ä—Ä—Å–∏ SKU –∫–∞—Ç–æ —á–∏—Å—Ç —Ç–µ–∫—Å—Ç –≤ —Ü–µ–ª–∏—è —Ä–µ–¥
    if target is None:
        for row in rows:
            try:
                txt = row.text
                if re.search(rf"\b{re.escape(str(sku))}\b", txt):
                    target = row
                    break
            except Exception:
                continue

    if target is None:
        return None, None, None

    # --- –¶–µ–Ω–∞ (–Ω–æ—Ä–º–∞–ª–Ω–∞, –ª–≤.) ---
    price = None
    try:
        # –∞–∫–æ –∏–º–∞ <strike> ‚Üí –Ω–æ—Ä–º–∞–ª–Ω–∞ —Ü–µ–Ω–∞
        strike_el = target.find_element(By.TAG_NAME, "strike")
        txt = strike_el.text.strip()
        m = re.search(r"(\d+[.,]?\d*)\s*–ª–≤", txt, re.I)
        if m:
            price = m.group(1).replace(",", ".")
    except Exception:
        # –∏–Ω–∞—á–µ –≤–∑–∏–º–∞–º–µ –ø—ä—Ä–≤–∞—Ç–∞ "‚Ä¶ –ª–≤." –æ—Ç —Ä–µ–¥–∞
        try:
            m2 = re.search(r"(\d+[.,]?\d*)\s*–ª–≤", target.text, re.I)
            if m2:
                price = m2.group(1).replace(",", ".")
        except Exception:
            pass

    # --- –ù–∞–ª–∏—á–Ω–æ—Å—Ç —Å–∞–º–æ –ø–æ tooltip/email (–±–µ–∑ –±—Ä–æ–π–∫–∏) ---
    status = "–ù–∞–ª–∏—á–µ–Ω"  # –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ
    try:
        # –í–∞—Ä–∏–∞–Ω—Ç–∏, –ø–æ –∫–æ–∏—Ç–æ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–º–µ ‚Äû–ò–∑—á–µ—Ä–ø–∞–Ω‚Äú:
        # 1) –∏–º–∞ –µ–ª–µ–º–µ–Ω—Ç —Å data-target="#send-request" (–±—É—Ç–æ–Ω ‚Äû–∏–∑–≤–µ—Å—Ç–µ—Ç–µ –º–µ‚Äú)
        target.find_element(By.CSS_SELECTOR, "[data-target='#send-request']")
        status = "–ò–∑—á–µ—Ä–ø–∞–Ω"
    except Exception:
        # 2) –∏–º–∞ tooltip —Å—ä—Å ‚Äû–ò–∑—á–µ—Ä–ø–∞–Ω –ø—Ä–æ–¥—É–∫—Ç!‚Äú –≤ —Ç–µ–∫—Å—Ç–∞
        try:
            if "–ò–∑—á–µ—Ä–ø–∞–Ω –ø—Ä–æ–¥—É–∫—Ç!" in target.text:
                status = "–ò–∑—á–µ—Ä–ø–∞–Ω"
            else:
                # 3) –∏–º–∞ –∏–∫–æ–Ω–∫–∞ Email (alt="Shopping cart") –≤—ä—Ç—Ä–µ –≤ custom-tooltip-holder
                emails = target.find_elements(By.CSS_SELECTOR, ".custom-tooltip-holder img[alt='Shopping cart']")
                if emails:
                    status = "–ò–∑—á–µ—Ä–ø–∞–Ω"
        except Exception:
            pass

    qty_placeholder = "-"  # –≤–µ—á–µ –ù–ï —á–µ—Ç–µ–º –±—Ä–æ–π–∫–∏
    return status, qty_placeholder, price

# ---------------- –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê 1 SKU ----------------
def process_one_sku(driver, sku: str):
    print(f"\n‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç–≤–∞–º SKU: {sku}")

    candidates = get_search_candidates(driver, sku)
    if not candidates:
        save_debug_html(driver, sku, "search_no_results")
        print(f"‚ùå –ù–µ –Ω–∞–º–µ—Ä–∏—Ö —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –∑–∞ {sku}")
        append_nf(sku)
        return

    for link in candidates:
        try:
            driver.get(link)
            time.sleep(REQUEST_WAIT)
            status, qty_ph, price = extract_from_product_page(driver, sku)
            if price is not None:
                print(f"  ‚úÖ {sku} ‚Üí {price} –ª–≤. | {status} | {link}")
                append_result([sku, status or "–ù–∞–ª–∏—á–µ–Ω", qty_ph, price])
                return
        except Exception:
            continue

    save_debug_html(driver, sku, "no_price_or_row")
    print(f"‚ùå –ù–µ –Ω–∞–º–µ—Ä–∏—Ö SKU {sku} –≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∏")
    append_nf(sku)

# ---------------- MAIN ----------------
def main():
    if not os.path.exists(SKU_CSV):
        print(f"‚ùå –õ–∏–ø—Å–≤–∞ {SKU_CSV}")
        return

    init_result_files()
    skus = read_skus(SKU_CSV)
    print(f"üßæ –û–±—â–æ SKU –≤ CSV: {len(skus)}")

    driver = create_driver()
    try:
        for sku in skus:
            process_one_sku(driver, sku)
            time.sleep(BETWEEN_SKU)  # —â–∞–¥—è—â–∞ –ø–∞—É–∑–∞
    finally:
        driver.quit()

    print(f"\n‚úÖ –†–µ–∑—É–ª—Ç–∞—Ç–∏: {RES_CSV}")
    print(f"üìÑ Not found: {NF_CSV}")

if __name__ == "__main__":
    main()
